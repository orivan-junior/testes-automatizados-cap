pipeline {
    agent any

    environment {
        CI = 'true'
        NEXUS_URL = 'http://nexus:8081'
        NEXUS_USER = 'jenkins'
        NEXUS_PASS = 'jenkins123'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Install Node.js (if not present)') {
            steps {
                sh '''
                    if ! command -v node &> /dev/null
                    then
                        echo "Instalando Node.js 18..."
                        curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
                        apt-get update
                        apt-get install -y nodejs
                    else
                        echo "Node.js já está instalado."
                    fi
                '''
            }
        }

        stage('Install Dependencies (npm ci)') {
            steps {
                sh 'npm ci'
            }
        }

        stage('Install Playwright Browsers (if not present)') {
            steps {
                sh '''
                    if ! npx playwright --version &> /dev/null
                    then
                        echo "Instalando Playwright browsers..."
                        npx playwright install --with-deps
                    else
                        echo "Playwright browsers já estão instalados."
                    fi
                '''
            }
        }

        stage('Generate BDD Features') {
            steps {
                sh '''
                    echo "🔧 Gerando features BDD..."
                    npx bddgen
                    echo "✅ Features BDD geradas com sucesso!"
                '''
            }
        }

        stage('Run Tests - Contratação (@contratacao)') {
            steps {
                sh '''
                    echo "🧪 Executando testes de contratação..."
                    npx playwright test --grep @contratacao --reporter=allure-playwright
                    echo "✅ Testes de contratação concluídos!"
                '''
            }
        }

        stage('Upload Evidence to Nexus') {
            steps {
                script {
                    def timestamp = new Date().format('yyyy-MM-dd_HH-mm-ss')
                    def buildNumber = env.BUILD_NUMBER

                    sh '''
                        echo "📤 Fazendo upload das evidências para o Nexus..."

                        # Criar diretório temporário
                        mkdir -p /tmp/evidence-upload

                        # Copiar evidências
                        cp -r test-results/screenshots /tmp/evidence-upload/ 2>/dev/null || echo "Nenhuma screenshot encontrada"
                        cp -r test-results/videos /tmp/evidence-upload/ 2>/dev/null || echo "Nenhum vídeo encontrado"
                        cp -r allure-results /tmp/evidence-upload/ 2>/dev/null || echo "Nenhum resultado Allure encontrado"

                        # Criar arquivo de informações do build
                        cat > /tmp/evidence-upload/build-info.txt << EOF
Build Number: ${BUILD_NUMBER}
Timestamp: ${timestamp}
Branch: ${GIT_BRANCH}
Commit: ${GIT_COMMIT}
Jenkins URL: ${BUILD_URL}
Test Type: Contratação (@contratacao)
EOF

                        # Fazer upload para Nexus
                        cd /tmp/evidence-upload
                        tar -czf contratacao-evidence-${BUILD_NUMBER}-${timestamp}.tar.gz *

                        # Upload usando curl
                        curl -u ${NEXUS_USER}:${NEXUS_PASS} \
                             --upload-file contratacao-evidence-${BUILD_NUMBER}-${timestamp}.tar.gz \
                             ${NEXUS_URL}/repository/playwright-evidence/contratacao-evidence-${BUILD_NUMBER}-${timestamp}.tar.gz

                        echo "✅ Upload concluído!"
                        echo "🔗 URL: ${NEXUS_URL}/repository/playwright-evidence/contratacao-evidence-${BUILD_NUMBER}-${timestamp}.tar.gz"
                    '''
                }
            }
        }
    }

    post {
        always {
            // Gerar relatório Allure
            allure([
                includeProperties: false,
                jdk: '',
                properties: [],
                reportBuildPolicy: 'ALWAYS',
                results: [[path: 'allure-results']]
            ])

            // Arquivos de evidência
            archiveArtifacts artifacts: 'test-results/**/*', allowEmptyArchive: true
            archiveArtifacts artifacts: 'allure-results/**/*', allowEmptyArchive: true

            // Limpar arquivos temporários
            sh 'rm -rf /tmp/evidence-upload'
        }

        success {
            echo "🎉 Pipeline executado com sucesso!"
            echo "✅ BDD features geradas e testes de contratação executados!"
        }

        failure {
            echo "❌ Pipeline falhou!"
            echo "🔍 Verifique os logs para mais detalhes."
        }
    }
}
